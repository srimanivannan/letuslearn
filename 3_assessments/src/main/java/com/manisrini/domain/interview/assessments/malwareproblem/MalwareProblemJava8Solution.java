package com.manisrini.domain.interview.assessments.malwareproblem;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class MalwareProblemJava8Solution {
    public static void main(String[] args) {
        int[] input = {1, 2, 0, 5, 0, 2, 4, 3, 3, 3};
        ArrayList<Integer> arrayList = Arrays.stream(input)
            .boxed()
            .collect(Collectors.toCollection(ArrayList::new));
        int patternLength = 8; // Number of elements to take at a time

        List<List<Integer>> result = IntStream.range(0, (arrayList.size() + patternLength - 1) / patternLength)
            .mapToObj(i -> arrayList.subList(i * patternLength, Math.min((i + 1) * patternLength, arrayList.size())))
            .map(it -> processMalware(it))
            .collect(Collectors.toList());

        // Print the result
        result.forEach(System.out::println);
    }

    private static List<Integer> processMalware(List<Integer> it) {
        //it.stream().toArray()
        return it;
    }
}
/*

    private static int findTOnLeft(int[] input, int index, int leftTPosition) {
        return IntStream.range(0, index)
            .filter(i -> input[i] == 'T')
            .map(i -> input[i])
            .findFirst()
            .orElse(-1);
    }

    private static int findTOnRight(int[] input, int index) {
        return IntStream.range(index + 1, input.length)
            .filter(i -> input[i] == 'T')
            .map(i -> input[i])
            .findFirst()
            .orElse(-1);
    }
 */